// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package sergio_parser

import __yyfmt__ "fmt" //line parser.y:2

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"log"
	"math/rand"
	"os"
	"strconv"
	"time"
	"unsafe"
)

type node struct {
	name     string
	children []node
}

type Ebr struct {
	Ebr_Start uint64
	Ebr_Size  uint64
	Ebr_Next  uint64
	Ebr_Name  [16]byte
}

// Struct particion
type partition struct { //3
	Status   byte
	PartType byte
	Fit      byte
	Start    uint64
	Size     uint64
	Name     [16]byte
}
type MasterBootRecord struct {
	Mbr_Tamanio     uint64
	Mbr_fecha       [21]byte
	Mbr_IdDisk      uint64
	Mbr_Particiones [4]partition
}
type MountParticion struct {
	Mountp_Name [50]byte
	Mountp_Id   [6]byte
}

var signatures [100]uint8

// Struct MBR
type mbr struct {
	Size          uint64
	Date          [21]byte
	DiskSignature uint8
	Part1         partition
	Part2         partition
	Part3         partition
	Part4         partition
}

var size_ string
var path_ string
var name_ string
var unit_ string
var alerta = false

func (n node) String() string {
	buf := new(bytes.Buffer)
	n.print(buf, " ")
	return buf.String()
}

func (n node) print(out io.Writer, indent string) {
	fmt.Fprintf(out, "\n%v%v", indent, n.name)
	for _, nn := range n.children {
		nn.print(out, indent+"  ")
	}
}

func Node(name string) node           { return node{name: name} }
func (n node) append(nn ...node) node { n.children = append(n.children, nn...); return n }

func Pruebas() string {
	s := fmt.Sprintln("hola mundo")
	return s
}

//line parser.y:100
type yySymType struct {
	yys   int
	node  node
	token string
}

const INT = 57346
const STRING = 57347
const IDENT = 57348
const EXEC = 57349
const PATH = 57350
const DIR = 57351
const ARCHIVO = 57352
const MKDISK = 57353
const SIZE = 57354
const MAYOR = 57355
const RUTA = 57356
const RMDISK = 57357
const FDISK = 57358
const NAME = 57359
const DIGIT = 57360
const UNIT = 57361
const LINEA = 57362

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INT",
	"STRING",
	"IDENT",
	"EXEC",
	"PATH",
	"DIR",
	"ARCHIVO",
	"MKDISK",
	"SIZE",
	"MAYOR",
	"RUTA",
	"RMDISK",
	"FDISK",
	"NAME",
	"DIGIT",
	"UNIT",
	"LINEA",
	"'-'",
	"'>'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:136

func Execute() {
	fi := bufio.NewReader(os.NewFile(0, "stdin"))
	yyDebug = 0
	yyErrorVerbose = true
	aux := ""
	for {
		var eqn string
		var ok bool

		fmt.Printf("Ingrese el comando: ")
		if eqn, ok = readline(fi); ok {
			l := newLexer(bytes.NewBufferString(eqn), os.Stdout, "file.name")
			if alerta {

				l = newLexer(bytes.NewBufferString(aux[:len(aux)-3]+eqn), os.Stdout, "file.name")
				alerta = false
			} else {
				aux = eqn
			}

			//fmt.Println("\n cadena captada o leida despues:  ", eqn)
			yyParse(l)

		} else {
			break
		}
	}

}

func readline(fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString('\n')
	if err != nil {
		return "", false
	}
	return s, true
}

func readFile(archivo string) mbr {
	file, err := os.Open(archivo)
	defer file.Close()
	if err != nil {
		log.Fatal(err)
	}
	m := mbr{}
	var size int = int(unsafe.Sizeof(m))
	fmt.Println("tamanio de mbr ", size)
	data := readNextBytes(file, size)
	fmt.Println("imprimo data", data)
	buffer := bytes.NewBuffer(data)
	err = binary.Read(buffer, binary.BigEndian, &m)
	if err != nil {
		log.Fatal("binary.Read failed", err)
	}
	return m

}

func randomNum() uint8 {
	rand.Seed(time.Now().UnixNano())
	x := rand.Intn(255)
	c := uint8(x)
	flag := false
	for i := 0; i < len(signatures); i++ {
		if c == signatures[i] {
			flag = true
		}
	}
	if flag {
		randomNum()
	}
	return c
}

func getDate() [21]byte { //devuelvo en byte la fecha de una vez
	var char [21]byte
	t := time.Now()
	fecha := fmt.Sprintf("%d-%02d-%02dT%02d:%02d:%02d",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())
	fmt.Println("fecha creada  es =>", fecha)
	copy(char[:], fecha)
	return char
}

//Creo el Disco
func createDisk(size_ string, path_ string, name_ string, unit_ string) {
	crearDirectorioSiNoExiste(path_)

	numero_size, error := strconv.Atoi(size_)
	if error != nil {
		fmt.Println("Error al convervir string a int ", error)
	}
	file, err := os.Create(path_ + name_)
	defer file.Close()
	if err != nil {
		log.Fatal(err)
	}
	x := int64(numero_size * 1024 * 1024)
	if unit_ == "k" {
		x = int64(numero_size * 1024)
	} else if unit_ == "m" {
		x = int64(numero_size * 1024 * 1024)
	}

	mbr := createMBR(uint64(x))
	s := &mbr
	_, err = file.Seek(x-1, 0)
	if err != nil {
		log.Fatal("failed to seek")
	}
	_, err = file.Write([]byte{0})
	if err != nil {
		log.Fatal("Write filed")
	}
	file.Seek(0, 0)

	var binario2 bytes.Buffer
	binary.Write(&binario2, binary.BigEndian, s)
	writeNextBytes(file, binario2.Bytes())

	var binario bytes.Buffer
	var n uint8
	file.Seek(x, int(unsafe.Sizeof(mbr)))
	binary.Write(&binario, binary.BigEndian, n)
	writeNextBytes(file, binario.Bytes())
}

//Crear Carpeta
func crearDirectorioSiNoExiste(directorio string) {
	if _, err := os.Stat(directorio); os.IsNotExist(err) {
		err = os.MkdirAll(directorio, os.ModePerm)
		if err != nil {
			// AquÃ­ puedes manejar mejor el error, es un ejemplo
			panic(err)
		}
	}
}

func writeNextBytes(file *os.File, bytes []byte) {

	_, err := file.Write(bytes)

	if err != nil {
		log.Fatal(err)
	}

}

//Creo MBR
func createMBR(x uint64) mbr {
	//
	mbr := mbr{}
	mbr.Size = x //size disco
	var c [21]byte
	c = getDate() //fecha
	copy(mbr.Date[:], c[:])
	//disk?signatura
	mbr.DiskSignature = randomNum()

	//part1
	name := "Part1"
	var nameParameter [16]byte
	copy(nameParameter[:], name)
	var inicio uint64
	inicio = uint64(unsafe.Sizeof(mbr))
	mbr.Part1 = mbrPartition('0', 'P', 'W', inicio, inicio, nameParameter) //part2
	name = "Part2"
	copy(nameParameter[:], name)
	mbr.Part2 = mbrPartition('0', 'P', 'W', inicio, inicio, nameParameter) //part3
	name = "Part3"
	copy(nameParameter[:], name)
	mbr.Part3 = mbrPartition('0', 'P', 'W', inicio, inicio, nameParameter) //part4
	name = "Part4"
	copy(nameParameter[:], name)
	mbr.Part4 = mbrPartition('0', 'P', 'W', inicio, inicio, nameParameter)
	return mbr
}

//Creo particion
func createPartition() {
	//part1
	//name := "Part1"
	//var nameParameter [16]byte
	//copy(nameParameter[:], name)
	//var inicio uint64
	//inicio=uint64(unsafe.Sizeof(mbr))
	//mbr.Part1 = mbrPartition('0', 'P','W', inicio, 20000, nameParameter)
}

//
func mbrPartition(status byte, tipo byte, fit byte, start uint64, size uint64, name [16]byte) partition {
	partition := partition{}
	partition.Status = status
	partition.PartType = tipo
	partition.Fit = fit
	partition.Start = start
	partition.Size = size
	partition.Name = name
	return partition
}

func readNextBytes(file *os.File, number int) []byte {
	bytes := make([]byte, number)
	_, err := file.Read(bytes)
	if err != nil {
		log.Fatal(err)
	}
	return bytes
}
func pausa_() {
	fmt.Println("Estamos en Pausa ...")
	bufio.NewReader(os.Stdin).ReadBytes('\n')
}

func eliminar_disco(path_ string) {
	err := os.Remove(path_)
	if err != nil {
		log.Fatal(err)
	}
}

func cargar() {
	archivo, error := os.Open("./hola.txt")

	if error != nil {
		fmt.Println("Hubo un error")
	}
	scanner := bufio.NewScanner(archivo)
	var i int
	for scanner.Scan() {
		i++
		linea := scanner.Text()
		fmt.Println(i)
		fmt.Println(linea)
	}

}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 30

var yyAct = [...]int{

	24, 23, 22, 21, 9, 8, 14, 20, 19, 18,
	13, 17, 25, 7, 5, 15, 27, 16, 3, 26,
	12, 6, 4, 28, 12, 12, 10, 11, 2, 1,
}
var yyPact = [...]int{

	-1000, 7, -1000, -16, -16, -16, -16, -1000, -2, -1000,
	-16, -16, -1000, -10, -12, -13, -14, -19, -20, -21,
	-22, -6, 10, 6, 17, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 29, 28, 13, 21,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 2, 4, 4, 3, 3,
	3, 3, 3,
}
var yyR2 = [...]int{

	0, 0, 2, 2, 2, 2, 2, 1, 5, 5,
	5, 5, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, 11, 15, 7, -4, -3, 21, 20,
	-4, -4, -3, 12, 8, 17, 19, 21, 21, 21,
	21, 22, 22, 22, 22, 18, 9, 10, 6,
}
var yyDef = [...]int{

	1, -2, 2, 0, 0, 0, 3, 7, 0, 12,
	4, 5, 6, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 8, 9, 10, 11,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 21, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 22,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:114
		{
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:118
		{
			fmt.Println(path_)
			fmt.Println(name_)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:119
		{
			fmt.Println(yyDollar[2].node)
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:120
		{
			cargar()
		}
	case 8:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:129
		{
			size_ = yyDollar[5].token
		}
	case 9:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:130
		{
			path_ = yyDollar[5].token
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:131
		{
			name_ = yyDollar[5].token
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:132
		{
			unit_ = yyDollar[5].token
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:133
		{
			alerta = true
		}
	}
	goto yystack /* stack new state and value */
}
